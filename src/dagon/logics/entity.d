/*
Copyright (c) 2017-2018 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.logics.entity;

import dlib.core.memory;
import dlib.container.array;

import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.transformation;
import dlib.math.quaternion;
import dlib.math.utils;

import dagon.core.libs;
import dagon.core.interfaces;
import dagon.core.ownership;
import dagon.core.event;
import dagon.logics.controller;
import dagon.logics.behaviour;
import dagon.logics.tween;
import dagon.graphics.material;
import dagon.graphics.rc;

Matrix4x4f rotationPart(Matrix4x4f m)
{
    Matrix4x4f res = m;
    res.a14 = 0.0f;
    res.a24 = 0.0f;
    res.a34 = 0.0f;
    return m;
}

enum Attach
{
    Parent,
    Camera
}

class Entity: Owner, Drawable
{
    uint id;
    uint groupID = 0;

    struct BehaviourListEntry
    {
        Behaviour behaviour;
        bool valid;
    }

    DynamicArray!BehaviourListEntry behaviours;
    DynamicArray!Tween tweens;

    Drawable drawable;
    EventManager eventManager;

    Entity parent = null;
    DynamicArray!Entity children;

    Vector3f position;
    Quaternionf rotation;
    Vector3f scaling;

    bool swapZY = false;

    Vector3f angles;
    bool useRotationAngles = true;

    Matrix4x4f transformation;
    Matrix4x4f invTransformation;

    Matrix4x4f absoluteTransformation;
    Matrix4x4f invAbsoluteTransformation;

    Matrix4x4f prevTransformation;
    Matrix4x4f prevAbsoluteTransformation;

    EntityController controller;
    //DefaultEntityController defaultController;

    Material material;
    RenderingContext rcLocal;

    bool visible = true;
    bool castShadow = true;
    Attach attach = Attach.Parent;

    bool useMotionBlur = true;

    bool clearZbuffer = false;

    int layer = 1;

    bool solid = false;

    bool dynamic = true;

    this(EventManager emngr, Owner owner)
    {
        super(owner);
        eventManager = emngr;

        transformation = Matrix4x4f.identity;
        invTransformation = Matrix4x4f.identity;

        position = Vector3f(0, 0, 0);
        rotation = Quaternionf.identity;
        scaling = Vector3f(1, 1, 1);

        angles = Vector3f(0, 0, 0);

        //defaultController = New!DefaultEntityController(this);
        //controller = defaultController;

        absoluteTransformation = Matrix4x4f.identity;
        invAbsoluteTransformation = Matrix4x4f.identity;
        prevTransformation = Matrix4x4f.identity;
        prevAbsoluteTransformation = Matrix4x4f.identity;

        tweens.reserve(10);
    }

    this(Entity parent)
    {
        this(parent.eventManager, parent);
        parent.children.append(this);
        this.parent = parent;
    }

    this(Entity parent, Owner owner)
    {
        this(parent.eventManager, owner);
        parent.children.append(this);
        this.parent = parent;
    }

    void removeChild(Entity e)
    {
        children.removeFirst(e);
    }

    void release()
    {
        if (parent)
            parent.removeChild(this);

        behaviours.free();

        for (size_t i = 0; i < children.data.length; i++)
            children.data[i].parent = null;

        children.free();

        tweens.free();
    }

    ~this()
    {
        release();
    }

    Vector3f absolutePosition()
    {
        if (parent)
            return position * parent.transformation;
        else
            return position;
    }

    void translate(Vector3f v)
    {
        position += v;
    }

    void translate(float vx, float vy, float vz)
    {
        position += Vector3f(vx, vy, vz);
    }

    void move(float speed)
    {
        position += transformation.forward * speed;
    }

    void moveToPoint(Vector3f p, float speed)
    {
        Vector3f dir = (p - position).normalized;
        float d = distance(p, position);
        if (d > speed)
            position += dir * speed;
        else
            position += dir * d;
    }

    void strafe(float speed)
    {
        position += transformation.right * speed;
    }

    void lift(float speed)
    {
        position += transformation.up * speed;
    }

    void rotate(Vector3f angles)
    {
        this.angles += angles;
    }

    void rotate(float pitch, float turn, float roll)
    {
        this.angles += Vector3f(pitch, turn, roll);
    }

    void pitch(float angle)
    {
        angles.x += angle;
    }

    void turn(float angle)
    {
        angles.y += angle;
    }

    void roll(float angle)
    {
        angles.z += angle;
    }

    Vector3f direction() @property
    {
        return transformation.forward;
    }

    Vector3f right() @property
    {
        return transformation.right;
    }

    Vector3f up() @property
    {
        return transformation.up;
    }

    Behaviour addBehaviour(Behaviour b)
    {
        behaviours.append(BehaviourListEntry(b, true));
        return b;
    }

    void removeBehaviour(Behaviour b)
    {
        foreach(i, ble; behaviours)
        {
            if (ble.behaviour is b)
                behaviours[i].valid = false;
        }
    }

    bool hasBehaviour(T)()
    {
        return this.behaviour!T() !is null;
    }

    T behaviour(T)()
    {
        T result = null;

        foreach(i, ble; behaviours)
        {
            T b = cast(T)ble.behaviour;
            if (b)
            {
                result = b;
                break;
            }
        }

        return result;
    }

    Tween* getInactiveTween()
    {
        Tween* inactiveTween = null;
        foreach(i, ref t; tweens.data)
        {
            if (!t.active)
            {
                inactiveTween = &tweens.data[i];
                break;
            }
        }
        return inactiveTween;
    }

    Tween* moveFromTo(Vector3f pointFrom, Vector3f pointTo, double duration, Easing easing = Easing.Linear)
    {
        Tween* existingTween = getInactiveTween();

        if (existingTween)
        {
            *existingTween = Tween(this, TweenType.Position, pointFrom, pointTo, duration, easing);
            return existingTween;
        }
        else
        {
            Tween t = Tween(this, TweenType.Position, pointFrom, pointTo, duration, easing);
            tweens.append(t);
            return &tweens.data[$-1];
        }
    }

    Tween* moveFrom(Vector3f point, double duration, Easing easing = Easing.Linear)
    {
        return moveFromTo(point, position, duration, easing);
    }

    Tween* moveTo(Vector3f point, double duration, Easing easing = Easing.Linear)
    {
        return moveFromTo(position, point, duration, easing);
    }
    
    Tween* rotateFromTo(Vector3f anglesFrom, Vector3f anglesTo, double duration, Easing easing = Easing.Linear)
    {
        Tween* existingTween = getInactiveTween();

        if (existingTween)
        {
            *existingTween = Tween(this, TweenType.Rotation, anglesFrom, anglesTo, duration, easing);
            return existingTween;
        }
        else
        {
            Tween t = Tween(this, TweenType.Rotation, anglesFrom, anglesTo, duration, easing);
            tweens.append(t);
            return &tweens.data[$-1];
        }
    }

    Tween* rotateFrom(Vector3f anglesFrom, double duration, Easing easing = Easing.Linear)
    {
        return rotateFromTo(anglesFrom, angles, duration, easing);
    }

    Tween* rotateTo(Vector3f anglesTo, double duration, Easing easing = Easing.Linear)
    {
        return rotateFromTo(angles, anglesTo, duration, easing);
    }

    void processEvents()
    {
        foreach(i, ble; behaviours)
        {
            if (ble.valid)
            {
                ble.behaviour.processEvents();
            }
        }

        foreach(child; children)
        {
            child.processEvents();
        }
    }

    void updateTransformation(double dt)
    {
        prevTransformation = transformation;

        if (controller)
            controller.update(dt);
        else
        {
            Quaternionf rot = rotation;
            
            if (useRotationAngles)
                rot *= rotationQuaternion!float(Axis.x, degtorad(angles.x)) *
                       rotationQuaternion!float(Axis.y, degtorad(angles.y)) * 
                       rotationQuaternion!float(Axis.z, degtorad(angles.z));

            transformation =
                translationMatrix(position) *
                rot.toMatrix4x4 *
                scaleMatrix(scaling);

            if (swapZY)
                transformation = transformation * rotationMatrix(Axis.x, degtorad(90.0f));

            invTransformation = transformation.inverse;
        }

        if (parent)
        {
            absoluteTransformation = parent.absoluteTransformation * transformation;
            prevAbsoluteTransformation = parent.prevAbsoluteTransformation * prevTransformation;
        }
        else
        {
            absoluteTransformation = transformation;
            prevAbsoluteTransformation = prevTransformation;
        }
    }

    void update(double dt)
    {
        foreach(i, ref tween; tweens.data)
        {
            tween.update(dt);
        }

        updateTransformation(dt);

        foreach(i, ble; behaviours)
        {
            if (ble.valid)
            {
                ble.behaviour.update(dt);
            }
        }

        foreach(child; children)
        {
            child.update(dt);
        }

        if (drawable)
            drawable.update(dt);
    }

    void render(RenderingContext* rc)
    {
        render(rc, false);
    }

    void render(RenderingContext* rc, bool renderChildren)
    {
        if (!visible)
            return;

        bool transparent = false;
        bool ignore = false;
        if (material)
        {
            if (material.isTransparent || material.usesCustomShader)
            {
                ignore = rc.ignoreTransparentEntities;
                transparent = true;
            }
            else
                ignore = rc.ignoreOpaqueEntities;
        }

        if (!ignore)
        foreach(i, ble; behaviours)
        {
            if (ble.valid)
                ble.behaviour.bind();
        }

        rcLocal = *rc;

        if (!ignore)
        {
            rcLocal.layer = layer;

            if (attach == Attach.Camera)
            {
                rcLocal.modelMatrix = translationMatrix(rcLocal.cameraPosition) * transformation;
                rcLocal.invModelMatrix = invTransformation * translationMatrix(-rcLocal.cameraPosition);

                if (useMotionBlur)
                    rcLocal.prevModelViewProjMatrix = rcLocal.projectionMatrix * (rcLocal.prevViewMatrix * (translationMatrix(rcLocal.prevCameraPosition) * prevTransformation));
                else
                    rcLocal.prevModelViewProjMatrix = rcLocal.projectionMatrix * (rcLocal.viewMatrix * (translationMatrix(rcLocal.cameraPosition) * transformation));
            }
            else
            {
                rcLocal.modelMatrix = absoluteTransformation;
                rcLocal.invModelMatrix = invTransformation; //TODO: parent transformation

                if (useMotionBlur)
                    rcLocal.prevModelViewProjMatrix = rcLocal.projectionMatrix * (rcLocal.prevViewMatrix * prevAbsoluteTransformation);
                else
                    rcLocal.prevModelViewProjMatrix = rcLocal.projectionMatrix * (rcLocal.viewMatrix * absoluteTransformation);
            }

            rcLocal.modelViewMatrix = rcLocal.viewMatrix * rcLocal.modelMatrix;
            rcLocal.normalMatrix = rcLocal.modelViewMatrix.inverse.transposed;

            rcLocal.blurModelViewProjMatrix = rcLocal.projectionMatrix * rcLocal.modelViewMatrix;

            if (useMotionBlur)
                rcLocal.blurMask = 1.0f;
            else
                rcLocal.blurMask = 0.0f;
        }

        bool shouldUseOverrideMat = true;
        if (transparent)
            shouldUseOverrideMat = !rcLocal.shadowPass;

        if (!ignore)
        {
            if (rcLocal.overrideMaterial && shouldUseOverrideMat)
                rcLocal.overrideMaterial.bind(&rcLocal);
            else if (material)
                material.bind(&rcLocal);

            if (clearZbuffer)
                glClear(GL_DEPTH_BUFFER_BIT);
        }

        if (drawable)
        {
            Entity drawableEntity = cast(Entity)drawable;

            if (drawableEntity)
            {
                auto absTrans = drawableEntity.absoluteTransformation;
                auto invAbsTrans = drawableEntity.invAbsoluteTransformation;
                auto prevAbsTrans = drawableEntity.prevAbsoluteTransformation;

                drawableEntity.absoluteTransformation = absoluteTransformation;
                drawableEntity.invAbsoluteTransformation = invAbsoluteTransformation;
                drawableEntity.prevAbsoluteTransformation = prevAbsoluteTransformation;

                foreach(child; drawableEntity.children)
                {
                    child.updateTransformation(0.0);
                }

                drawableEntity.render(&rcLocal, true);

                drawableEntity.absoluteTransformation = absTrans;
                drawableEntity.invAbsoluteTransformation = invAbsTrans;
                drawableEntity.prevAbsoluteTransformation = prevAbsTrans;
            }
            else if (!ignore)
            {
                drawable.render(&rcLocal);
            }
        }

        if (!ignore)
        {
            if (rcLocal.overrideMaterial && shouldUseOverrideMat)
                rcLocal.overrideMaterial.unbind(&rcLocal);
            else if (material)
                material.unbind(&rcLocal);
        }

        if (!ignore)
        foreach(i, ble; behaviours)
        {
            if (ble.valid)
                ble.behaviour.render(&rcLocal);
        }

        if (renderChildren)
        foreach(child; children)
        {
            child.render(&rcLocal);
        }

        if (!ignore)
        foreach_reverse(i, ble; behaviours.data)
        {
            if (ble.valid)
                ble.behaviour.unbind();
        }
    }
}

unittest
{
    EventManager emngr = null;
    class B1 : Behaviour
    {
        this(Entity e) {super(e);}
    }
    class B2 : Behaviour
    {
        this(Entity e) {super(e);}
    }
    auto e = New!Entity(emngr, null);
    New!B1(e);
    assert(e.hasBehaviour!B1());
    New!B2(e);
    assert(e.hasBehaviour!B2());

    auto b1 = e.behaviour!B1();
    assert(b1);
    auto b2 = e.behaviour!B2();
    assert(b2);

    // sets `valid` to false, but does not delete the behaviour
    e.removeBehaviour(b1);
    // ... so hasBehaviour reports true
    assert(e.hasBehaviour!B1());
}
