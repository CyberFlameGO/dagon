/*
Copyright (c) 2019 Mateusz MuszyÅ„ski

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.core.input;

import std.stdio;
import std.ascii;
import std.conv;
import dlib.core.memory;
import dlib.container.dict;
import dagon.core.event;
import dagon.core.libs;
import dagon.core.ownership;
import dagon.resource.asset;

enum BindingType
{
    Keyboard,
    MouseButton,
    MouseAxis,
    GamepadButton,
    GamepadAxis
}

struct Binding
{
    string name;

    BindingType type;
    union
    {
        int key;
        int button;
        int axis;
    }
}

class InputManager/* : Owner*/
{
    EventManager eventManager;

    Dict!(Binding, string) bindings;
    //Dict!(DynamicArray!Binding, string) bindings;

    this(EventManager em)
    {
        eventManager = em;
        bindings = dict!(Binding, string)();
    }

    void addBinding(string name, BindingType type, int value)
    {
        bindings[name] = Binding(name, type, value);
    }

    void addBinding(string name, string value)
    {
        import core.stdc.string;
        // Binding format consist of device type and number in
        // decimal coresponding to button or axis of this device
        // eg. kb101, ma0, mb1, gb4, ga1
        // kb -> keybaord
        // ma -> mouse axis
        // mb -> mouse button
        // ga -> gamepad axis
        // gb -> gamepad button
        //
        // maybe use SDL_GetScancodeName for beter format with acctual names ?

        if (value.length < 3)
            return;

        BindingType type;

        /*if (strncmp(value.ptr, "kb", 2) == 0)*/
        if (value[0] == 'k' && value[1] == 'b') type = BindingType.Keyboard;
        else if (value[0] == 'm' && value[1] == 'a') type = BindingType.MouseAxis;
        else if (value[0] == 'm' && value[1] == 'b') type = BindingType.MouseButton;
        else if (value[0] == 'g' && value[1] == 'a') type = BindingType.GamepadAxis;
        else if (value[0] == 'g' && value[1] == 'b') type = BindingType.GamepadButton;
        else return;

        int result = 0;
        for(int i = 2; i < value.length; i++)
            result = result * 10 + (value[i] - '0');

        bindings[name] = Binding(name, type, result);
    }

    bool getButton(string name)
    {
        auto binding = name in bindings;
        if (!binding)
            return false;

        switch(binding.type)
        {
            case BindingType.Keyboard:
                return eventManager.keyPressed[binding.key];

            case BindingType.MouseButton:
                return eventManager.mouseButtonPressed[binding.button];

            case BindingType.MouseAxis:
                if (binding.axis == 0)
                    return eventManager.mouseRelX == 0;
                else if (binding.axis == 1)
                    return eventManager.mouseRelY == 0;

                return false;

            case BindingType.GamepadButton:
                if (eventManager.gameControllerAvailable)
                    return SDL_GameControllerGetButton(eventManager.controller, cast(SDL_GameControllerButton)binding.button) == 0;
                return false;

            case BindingType.GamepadAxis:
                if (eventManager.gameControllerAvailable)
                    return eventManager.gameControllerAxis(binding.axis) > 0.001;
                return false;

            default:
                return false;
        }
    }

    bool getButtonUp(string name)
    {
        auto binding = name in bindings;
        if (!binding)
            return false;

        switch(binding.type)
        {
            case BindingType.Keyboard:
                return eventManager.keyUp[binding.key];

            case BindingType.MouseButton:
                return eventManager.mouseButtonUp[binding.button];

            case BindingType.MouseAxis:
                // Do we want to track this?
                return false;

            case BindingType.GamepadButton:
                return eventManager.controllerButtonUp[binding.button];

            case BindingType.GamepadAxis:
                // And track this?
                return false;

            default:
                return false;
        }
    }

    bool getButtonDown(string name)
    {
        auto binding = name in bindings;
        if (!binding)
            return false;

        switch(binding.type)
        {
            case BindingType.Keyboard:
                return eventManager.keyDown[binding.key];

            case BindingType.MouseButton:
                return eventManager.mouseButtonDown[binding.button];

            case BindingType.MouseAxis:
                return false;

            case BindingType.GamepadButton:
                return eventManager.controllerButtonDown[binding.button];

            case BindingType.GamepadAxis:
                return false;

            default:
                return false;
        }
    }

    float getAxis(string name)
    {
        auto binding = name in bindings;
        if (!binding)
            return 0.0f;

        switch(binding.type)
        {
            case BindingType.Keyboard:
                return eventManager.keyPressed[binding.key] ? 1.0f : 0.0f;

            case BindingType.MouseButton:
                return eventManager.mouseButtonPressed[binding.button] ? 1.0f : 0.0f;

            case BindingType.MouseAxis:
                if (binding.axis == 0)
                    return eventManager.mouseRelX / (eventManager.windowWidth * 0.5f); // map to -1 to 1 range
                else if (binding.axis == 1)
                    return eventManager.mouseRelY / (eventManager.windowHeight * 0.5f);

                return 0.0f;

            case BindingType.GamepadButton:
                if (eventManager.gameControllerAvailable)
                    return SDL_GameControllerGetButton(eventManager.controller, cast(SDL_GameControllerButton)binding.button);
                return 0.0f;

            case BindingType.GamepadAxis:
                if (eventManager.gameControllerAvailable)
                    return eventManager.gameControllerAxis(binding.axis);
                return 0.0f;

            default:
                return 0.0f;
        }
    }
}
