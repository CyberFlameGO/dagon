/*
Copyright (c) 2017-2018 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.graphics.framebuffer;

import std.stdio;
import std.math;

import dlib.math.vector;
import dlib.image.color;

import dagon.core.libs;
import dagon.core.ownership;
import dagon.graphics.gbuffer;

abstract class RenderTarget: Owner
{
    uint width;
    uint height;
    
    this(uint w, uint h, Owner o)
    {
        super(o);
        width = w;
        height = h;
    }
    
    void bind();
    void unbind();
    void clear(Color4f clearColor);
}

/*
 * TODO: the whole thing should be rewritten in more reasonable way.
 * E.g., a chain of specialized buffers extending abstract interface.
 */
class Framebuffer: RenderTarget
{
    GBuffer gbuffer;

    GLuint fbo;
    GLuint depthTexture = 0;
    GLuint colorTexture1 = 0;
    GLuint colorTexture2 = 0;
    GLuint currColorTexture = 0;
    GLuint lumaTexture = 0;
    GLuint velocityTexture = 0;

    Vector2f[4] vertices;
    Vector2f[4] texcoords;
    uint[3][2] indices;

    GLuint vao = 0;
    GLuint vbo = 0;
    GLuint tbo = 0;
    GLuint eao = 0;

    bool isFloating = false;

    bool isHDRSceneBuffer = false;

    this(GBuffer gbuffer, uint w, uint h, bool floating, bool isHDRSceneBuffer, Owner o)
    {
        super(w, h, o);

        this.isHDRSceneBuffer = isHDRSceneBuffer;

        this.gbuffer = gbuffer;

        glActiveTexture(GL_TEXTURE0);

        glGenTextures(1, &depthTexture);
        glBindTexture(GL_TEXTURE_2D, depthTexture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH24_STENCIL8, width, height, 0, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8, null);
        glBindTexture(GL_TEXTURE_2D, 0);

        isFloating = floating;

        glGenTextures(1, &colorTexture1);
        glBindTexture(GL_TEXTURE_2D, colorTexture1);
        if (!floating)
        {
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, null);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        }
        else
        {
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, width, height, 0, GL_RGBA, GL_FLOAT, null);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        }
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        glBindTexture(GL_TEXTURE_2D, 0);
        
        glGenTextures(1, &colorTexture2);
        glBindTexture(GL_TEXTURE_2D, colorTexture2);
        if (!floating)
        {
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, null);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        }
        else
        {
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA16F, width, height, 0, GL_RGBA, GL_FLOAT, null);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        }
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
        glBindTexture(GL_TEXTURE_2D, 0);
        
        currColorTexture = colorTexture1;
        
        if (isHDRSceneBuffer)
        {
            glGenTextures(1, &lumaTexture);
            glBindTexture(GL_TEXTURE_2D, lumaTexture);
            glTexImage2D(GL_TEXTURE_2D, 0, GL_R16F, width, height, 0, GL_RED, GL_FLOAT, null);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
            glBindTexture(GL_TEXTURE_2D, 0);
        }

        glGenFramebuffers(1, &fbo);
        glBindFramebuffer(GL_FRAMEBUFFER, fbo);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, currColorTexture, 0);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D, depthTexture, 0);

        if (isHDRSceneBuffer)
        {
            velocityTexture = gbuffer.velocityTexture;

            // TODO: use the same layout as geometry pass?
            glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, GL_TEXTURE_2D, lumaTexture, 0);
            glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT2, GL_TEXTURE_2D, velocityTexture, 0);

            GLenum[3] bufs = [GL_COLOR_ATTACHMENT0, GL_COLOR_ATTACHMENT1, GL_COLOR_ATTACHMENT2];
            glDrawBuffers(3, bufs.ptr);
        }
        else
        {
            glDrawBuffer(GL_COLOR_ATTACHMENT0);
        }

        GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
        if (status != GL_FRAMEBUFFER_COMPLETE)
            writeln(status);

        glBindFramebuffer(GL_FRAMEBUFFER, 0);

        vertices[0] = Vector2f(0, 0);
        vertices[1] = Vector2f(0, 1);
        vertices[2] = Vector2f(1, 0);
        vertices[3] = Vector2f(1, 1);

        texcoords[0] = Vector2f(0, 1);
        texcoords[1] = Vector2f(0, 0);
        texcoords[2] = Vector2f(1, 1);
        texcoords[3] = Vector2f(1, 0);

        indices[0][0] = 0;
        indices[0][1] = 1;
        indices[0][2] = 2;

        indices[1][0] = 2;
        indices[1][1] = 1;
        indices[1][2] = 3;

        glGenBuffers(1, &vbo);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, vertices.length * float.sizeof * 2, vertices.ptr, GL_STATIC_DRAW);

        glGenBuffers(1, &tbo);
        glBindBuffer(GL_ARRAY_BUFFER, tbo);
        glBufferData(GL_ARRAY_BUFFER, texcoords.length * float.sizeof * 2, texcoords.ptr, GL_STATIC_DRAW);

        glGenBuffers(1, &eao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eao);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.length * uint.sizeof * 3, indices.ptr, GL_STATIC_DRAW);

        glGenVertexArrays(1, &vao);
        glBindVertexArray(vao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, eao);

        glEnableVertexAttribArray(0);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, null);

        glEnableVertexAttribArray(1);
        glBindBuffer(GL_ARRAY_BUFFER, tbo);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, null);

        glBindVertexArray(0);

        maxMipmap = cast(int)log2(fmax(width, height));
    }

    int maxMipmap;

    ~this()
    {
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glDeleteFramebuffers(1, &fbo);

        if (glIsTexture(depthTexture))
            glDeleteTextures(1, &depthTexture);
        if (glIsTexture(colorTexture1))
            glDeleteTextures(1, &colorTexture1);
        if (glIsTexture(colorTexture2))
            glDeleteTextures(1, &colorTexture2);
        if (glIsTexture(lumaTexture))
            glDeleteTextures(1, &lumaTexture);

        glDeleteVertexArrays(1, &vao);
        glDeleteBuffers(1, &vbo);
        glDeleteBuffers(1, &tbo);
        glDeleteBuffers(1, &eao);
    }

    void genLuminanceMipmaps()
    {
        glBindTexture(GL_TEXTURE_2D, lumaTexture);
        glGenerateMipmap(GL_TEXTURE_2D);
        glBindTexture(GL_TEXTURE_2D, 0);
    }

    float averageLuminance()
    {
        glBindTexture(GL_TEXTURE_2D, lumaTexture);
        float luma = 0.0f;
        if (!isHDRSceneBuffer)
            return 0.0f;
        else
            glGetTexImage(GL_TEXTURE_2D, maxMipmap, GL_RED, GL_FLOAT, &luma);
        glBindTexture(GL_TEXTURE_2D, 0);
        return luma;
    }

    override void bind()
    {
        glBindFramebuffer(GL_FRAMEBUFFER, fbo);
    }

    override void unbind()
    {
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
    }

    void render()
    {
        glDepthMask(0);
        glDisable(GL_DEPTH_TEST);
        glBindVertexArray(vao);
        glDrawElements(GL_TRIANGLES, cast(uint)indices.length * 3, GL_UNSIGNED_INT, cast(void*)0);
        glBindVertexArray(0);
        glEnable(GL_DEPTH_TEST);
        glDepthMask(1);
    }

    override void clear(Color4f clearColor)
    {
    /*
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    */
        Color4f zero = Color4f(0, 0, 0, 0);
        glClearBufferfv(GL_COLOR, 0, clearColor.arrayof.ptr);
        if (isHDRSceneBuffer)
        {
            glClearBufferfv(GL_COLOR, 1, zero.arrayof.ptr);
        }
    }
    
    void swapColorTextureAttachments()
    {
        glBindFramebuffer(GL_FRAMEBUFFER, fbo);
        if (currColorTexture == colorTexture1)
            currColorTexture = colorTexture2;
        else
            currColorTexture = colorTexture1;
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, currColorTexture, 0);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
    }
    
    GLuint currentColorTexture() @property
    {
        return currColorTexture;
    }
    
    GLuint previousColorTexture() @property
    {
        if (currColorTexture == colorTexture1)
            return colorTexture2;
        else
            return colorTexture1;
    }
}
